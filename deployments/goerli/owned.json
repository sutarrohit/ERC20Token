{
  "address": "0x779C6E01f53c448b9318820803351C63253EBE5d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ownerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d9187338e81767be1d9f0a5e6927843e41976e6545fc638e46d946417090692",
  "receipt": {
    "to": null,
    "from": "0x2c20b33DeC0ca2511CC676f17ADd8B5330A2EBd3",
    "contractAddress": "0x779C6E01f53c448b9318820803351C63253EBE5d",
    "transactionIndex": 18,
    "gasUsed": "277326",
    "logsBloom": "0x
    "blockHash": "0xe8b6723e65b78792e2cc4278ad0acad1407025a74f6705916212d5c62c9063ea",
    "transactionHash": "0x5d9187338e81767be1d9f0a5e6927843e41976e6545fc638e46d946417090692",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 7883349,
        "transactionHash": "0x5d9187338e81767be1d9f0a5e6927843e41976e6545fc638e46d946417090692",
        "address": "0x779C6E01f53c448b9318820803351C63253EBE5d",
        "topics": [
          "0x232fba693394e47cdbc6f4760e24687abfb144ddca4600a356321757a0a129fb",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c20b33dec0ca2511cc676f17add8b5330a2ebd3"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0xe8b6723e65b78792e2cc4278ad0acad1407025a74f6705916212d5c62c9063ea"
      }
    ],
    "blockNumber": 7883349,
    "cumulativeGasUsed": "3855414",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7097b15229a825c22f29268d370f7358",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOwner()\":{\"details\":\"Return current owner of the contract\"},\"transferOwnership(address)\":{\"details\":\"owner of the contract transfer onwership to new owner\",\"params\":{\"_newOwner\":\"Address of the new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor \"}},\"notice\":\"This contract manage owner of the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token.sol\":\"owned\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Token.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ERC20Token {\\r\\n    /**Functions */\\r\\n    function name() public view virtual returns (string memory);\\r\\n\\r\\n    function symbol() public view virtual returns (string memory);\\r\\n\\r\\n    function decimals() public view virtual returns (uint256);\\r\\n\\r\\n    function totalSupply() public view virtual returns (uint256);\\r\\n\\r\\n    function balanceOf(address _owner) public view virtual returns (uint256 balance);\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public virtual returns (bool success);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\\r\\n\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 remaining);\\r\\n\\r\\n    /**Events*/\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n}\\r\\n\\r\\n/**This contract manage owner of the contract*/\\r\\ncontract owned {\\r\\n    // /**Events */\\r\\n    event ownerChanged(address indexed oldOwner, address indexed owner);\\r\\n    address private owner;\\r\\n\\r\\n    /**Constructor */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        emit ownerChanged(address(0), owner);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Only owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev owner of the contract transfer onwership to new owner\\r\\n     * @param _newOwner Address of the new owner\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public onlyOwner {\\r\\n        require(_newOwner != address(0));\\r\\n        owner = _newOwner;\\r\\n        emit ownerChanged(msg.sender, _newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return current owner of the contract\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**ERC20 Toekn implementation*/\\r\\ncontract Token is owned, ERC20Token {\\r\\n    /** State Variables*/\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _decimal;\\r\\n    uint256 private _totalSupply;\\r\\n    address private _minter;\\r\\n    uint256 test;\\r\\n\\r\\n    /**Mappings*/\\r\\n    mapping(address => uint256) private _balance;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    /** Constructor*/\\r\\n    constructor() {\\r\\n        _name = \\\"Flat\\\";\\r\\n        _symbol = \\\"FT\\\";\\r\\n        _decimal = 0;\\r\\n        _totalSupply = 1000000;\\r\\n        _minter = msg.sender;\\r\\n        _balance[_minter] = _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol\\r\\n     */\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the tokens decimal\\r\\n     */\\r\\n\\r\\n    function decimals() public view override returns (uint256) {\\r\\n        return _decimal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the tokens in totalSupply.\\r\\n     */\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the tokens balance.\\r\\n     */\\r\\n\\r\\n    function balanceOf(address _owner) public view override returns (uint256 balance) {\\r\\n        return _balance[_owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns allowance of token to spender\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token from one address to other token\\r\\n     * @param _from Address of spender\\r\\n     * @param _to Address of receiver\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) internal returns (bool success) {\\r\\n        require(_from != address(0), \\\"Address not Found\\\");\\r\\n        require(_to != address(0), \\\"Address not Found\\\");\\r\\n        require(_balance[_from] >= _value, \\\"You don't have enough balance\\\");\\r\\n        _balance[_from] -= _value;\\r\\n        _balance[_to] += _value;\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner transfer token from their address to receiver\\r\\n     * @param _to Address of receiver\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\\r\\n        address owner = msg.sender;\\r\\n        _transfer(owner, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Spender transfer token which owner allowed them\\r\\n     * @param _from Address of spender\\r\\n     * @param _to Address of receiver\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public override returns (bool success) {\\r\\n        address spender = msg.sender;\\r\\n        _spenderAllowance(_from, spender, _value);\\r\\n        _transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner call this function allow spender to transfer their token\\r\\n     * @param _spender Address that can transfer owner's token\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner of token can allow spender to transfer their token\\r\\n     * @param owner Owner of the token\\r\\n     * @param spender Address that can transfer owner's token\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 _value\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = _value;\\r\\n        emit Approval(owner, spender, _value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev When spender transfer this tokens, this function remove allowance of transferred tokens\\r\\n     * @param from Owner of the token\\r\\n     * @param spender Address that can transfer owner's token\\r\\n     * @param _value Number of tokens\\r\\n     */\\r\\n    function _spenderAllowance(\\r\\n        address from,\\r\\n        address spender,\\r\\n        uint256 _value\\r\\n    ) internal {\\r\\n        uint256 currentAllowance = allowance(from, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= _value, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(from, spender, currentAllowance - _value);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner increase allowance of spender to spend more tokens\\r\\n     * @param spender Address that can transfer owner's token\\r\\n     * @param addedValue Number of tokens\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner decrease allowance of spender to spend less tokens\\r\\n     * @param spender Address that can transfer owner's token\\r\\n     * @param removeValue Number of tokens\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 removeValue) public virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        require(allowance(owner, spender) >= removeValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(owner, spender, allowance(owner, spender) - removeValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Owner can mint unlimited tokens\\r\\n     * @param account Address to send minted tokens\\r\\n     * @param amount Number of tokens to be mint\\r\\n     */\\r\\n    function mint(address account, uint256 amount) public onlyOwner {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _totalSupply += amount;\\r\\n        _balance[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only owner of the token can burn thier token\\r\\n     * @param account Address that burn thier tokens\\r\\n     * @param amount Number of tokens to be burn\\r\\n     */\\r\\n    function burn(address account, uint256 amount) public {\\r\\n        require(msg.sender == account, \\\"Only owner of the token can burn thier token\\\");\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        uint256 accountBalance = _balance[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n\\r\\n        _totalSupply -= amount;\\r\\n        _balance[account] -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n//Contract Address: 0x812F447911dAf485de8296e2Bb3D1Dc95C84e462\\r\\n\",\"keccak256\":\"0x32acd778ea107b5aa070d7b66e321c02c12edd5a1bdfb00456879ab12f41d89c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f232fba693394e47cdbc6f4760e24687abfb144ddca4600a356321757a0a129fb60405160405180910390a3610395806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063f2fde38b14610059575b600080fd5b610043610075565b6040516100509190610243565b60405180910390f35b610073600480360381019061006e919061028f565b61009e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101239061033f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361016557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f232fba693394e47cdbc6f4760e24687abfb144ddca4600a356321757a0a129fb60405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022d82610202565b9050919050565b61023d81610222565b82525050565b60006020820190506102586000830184610234565b92915050565b600080fd5b61026c81610222565b811461027757600080fd5b50565b60008135905061028981610263565b92915050565b6000602082840312156102a5576102a461025e565b5b60006102b38482850161027a565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006103296021836102bc565b9150610334826102cd565b604082019050919050565b600060208201905081810360008301526103588161031c565b905091905056fea26469706673582212203c59f4284d1ed490c27dd1af60099ace163aa263c0b2a9a85ed0744915dca96d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063f2fde38b14610059575b600080fd5b610043610075565b6040516100509190610243565b60405180910390f35b610073600480360381019061006e919061028f565b61009e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101239061033f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361016557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f232fba693394e47cdbc6f4760e24687abfb144ddca4600a356321757a0a129fb60405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022d82610202565b9050919050565b61023d81610222565b82525050565b60006020820190506102586000830184610234565b92915050565b600080fd5b61026c81610222565b811461027757600080fd5b50565b60008135905061028981610263565b92915050565b6000602082840312156102a5576102a461025e565b5b60006102b38482850161027a565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006103296021836102bc565b9150610334826102cd565b604082019050919050565b600060208201905081810360008301526103588161031c565b905091905056fea26469706673582212203c59f4284d1ed490c27dd1af60099ace163aa263c0b2a9a85ed0744915dca96d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOwner()": {
        "details": "Return current owner of the contract"
      },
      "transferOwnership(address)": {
        "details": "owner of the contract transfer onwership to new owner",
        "params": {
          "_newOwner": "Address of the new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor "
      }
    },
    "notice": "This contract manage owner of the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/Token.sol:owned",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}