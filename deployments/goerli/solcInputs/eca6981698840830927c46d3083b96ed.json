{
  "language": "Solidity",
  "sources": {
    "contracts/Token.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC20Token {\r\n    //functions\r\n    function name() public view virtual returns (string memory);\r\n\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    function decimals() public view virtual returns (uint256);\r\n\r\n    function totalSupply() public view virtual returns (uint256);\r\n\r\n    function balanceOf(address _owner) public view virtual returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public virtual returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view virtual returns (uint256 remaining);\r\n\r\n    //Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n//This contract manage onwer of the contract\r\ncontract owned {\r\n    // /**Events */\r\n    event ownerChanged(address indexed oldOwner, address indexed owner);\r\n    address private owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit ownerChanged(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    //TransferOwnerShip\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        emit ownerChanged(msg.sender, _newOwner);\r\n    }\r\n\r\n    // return current owner of the contract\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n//ERC20 Toekn implementation\r\ncontract Token is owned, ERC20Token {\r\n    /** State Variables*/\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimal;\r\n    uint256 private _totalSupply;\r\n    address private _minter;\r\n\r\n    /**Mappings*/\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    /** Constructor*/\r\n    constructor() {\r\n        _name = \"Flat\";\r\n        _symbol = \"FT\";\r\n        _decimal = 18;\r\n        _totalSupply = 1000000 * 10**18;\r\n        _minter = msg.sender;\r\n        _balance[_minter] = _totalSupply;\r\n    }\r\n\r\n    //Getter functions\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint256) {\r\n        return _decimal;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view override returns (uint256 balance) {\r\n        return _balance[_owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /*\r\n     *This function transfer token from one address to another adddress\r\n     */\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool success) {\r\n        require(_from != address(0), \"Address not Found\");\r\n        require(_to != address(0), \"Address not Found\");\r\n        require(_balance[_from] >= _value, \"You don't have enough balance\");\r\n        _balance[_from] -= _value;\r\n        _balance[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //Onwer transfer tokens to receiver\r\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //Third party which owner allowed to transfer token\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public override returns (bool success) {\r\n        address spender = msg.sender;\r\n        _spenderAllowance(_from, spender, _value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //This function approve spender to spend allowed tokens\r\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\r\n        address owner = msg.sender;\r\n        _approve(owner, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    //approve function\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 _value\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = _value;\r\n        emit Approval(owner, spender, _value);\r\n    }\r\n\r\n    //Check if spender have enough tokens.\r\n    function _spenderAllowance(\r\n        address from,\r\n        address spender,\r\n        uint256 _value\r\n    ) internal {\r\n        uint256 currentAllowance = allowance(from, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= _value, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(from, spender, currentAllowance - _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Increase allowance of spender\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    //Decrease allowance of spender\r\n    function decreaseAllowance(address spender, uint256 removeValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        require(allowance(owner, spender) >= removeValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(owner, spender, allowance(owner, spender) - removeValue);\r\n        return true;\r\n    }\r\n\r\n    //Owner can mint unlimited tokens\r\n    function mint(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balance[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    //Any one can burn thier tokens\r\n    function burn(address account, uint256 amount) public {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply -= amount;\r\n        _balance[account] -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}